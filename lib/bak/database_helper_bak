import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';

class DatabaseHelper {
  late Database _db;
  static const String tableName = 'malaria';
  static const String userProfileTable = 'tbl_usr';
  DatabaseHelper() {
    _createDatabase();
  }
/*CREATE TABLES*/
  Future<Database> _createDatabase() async {
    var dataPath = await getDatabasesPath();
    String path = join(dataPath, "malaria.db");
    _db = await openDatabase(path);

//CREATE MALARIA TABLE
    await _db.execute(
        'CREATE TABLE IF NOT EXISTS $tableName(id INTEGER PRIMARY KEY, name TEXT, age TEXT, sex TEXT)');

//CREATE USER PROFILE TABLE
    await _db.execute(
        'CREATE TABLE IF NOT EXISTS $userProfileTable(usr_id INTEGER PRIMARY KEY, usr_name TEXT, usr_state TEXT, usr_tsp_mimu TEXT, usr_tsp_eho TEXT, usr_area TEXT, usr_act TEXT, usr_vil TEXT)');
    return _db;
  }

// INSERT INTO MALARIA TABLE
  Future<int> insertMalaria(Map<String, dynamic> malaria) async {
    _db = await _createDatabase();
    return await _db.insert(tableName, malaria);
  }

//SELECT * FROM MALARIA TABLE
  Future<List<Map<String, dynamic>>> getAllMalaria() async {
    _db = await _createDatabase();
    return await _db.query(tableName, columns: ['id', 'name', 'age', 'sex']);
  }

//UPDATE MALARIA TABLE
  Future<int> updateMalaria(Map<String, dynamic> malaria, int id) async {
    _db = await _createDatabase();
    return await _db.update(tableName, malaria, where: "id=?", whereArgs: [id]);
  }

//UPDATE USER PROFILE TABLE
  Future<int> updateUserProfile(
      Map<String, dynamic> userProfile, int id) async {
    _db = await _createDatabase();
    return await _db
        .update(userProfileTable, userProfile, where: "id=?", whereArgs: [id]);
  }

//DELETE MALARIA ROW
  Future<int> deleteMalaria(int id) async {
    _db = await _createDatabase();
    return await _db.delete(tableName, where: "id=?", whereArgs: [id]);
  }

//DELETE ALL ROW MALARIA TABLE
  Future<int> delete() async {
    _db = await _createDatabase();
    return await _db.rawDelete("DELETE FROM $tableName");
  }

//INSERT INTO USER PROFILE TABLE
  Future<int> insertUserProfile(Map<String, dynamic> userProfile) async {
    _db = await _createDatabase();
    return await _db.insert(userProfileTable, userProfile);
  }

//SELECT * FROM USER PROFILE TABLE
  Future<List<Map<String, dynamic>>> getAllUserProfiles() async {
    _db = await _createDatabase();
    return await _db.query(userProfileTable, columns: [
      'usr_id',
      'usr_name',
      'usr_state',
      'usr_tsp_mimu',
      'usr_tsp_eho',
      'usr_area',
      'usr_act',
      'usr_vil'
    ]);
  }

//DELETE USER PROFILE
  Future<int> deleteUserProfile(int id) async {
    _db = await _createDatabase();
    return await _db.delete(userProfileTable, where: "id=?", whereArgs: [id]);
  }

//GET USER PROFILE
  Future<Map<String, dynamic>?> getUserProfile() async {
    final db = await DatabaseHelper.instance.database;
    final result = await db.query('user_profile');
    if (result.isNotEmpty) {
      return result.first;
    }
    return null;
  }

  Future<Database> get database async {
    if (_db != null) {
      return _db;
    }
    _db = await _createDatabase();
    return _db;
  }

  static final DatabaseHelper _instance = DatabaseHelper._privateConstructor();
  DatabaseHelper._privateConstructor();
  static DatabaseHelper get instance => _instance;
}
